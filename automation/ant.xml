<project name="autonomx" basedir="." default="mvn-clean-generate">
    <property name="property.file.updated.path" value="target/generated-sources/updated-properties.properties/" />
    <property name="property.file.marker.path" value="target/generated-sources/marker.txt" />
    <property name="source.change.detector.marker.path" value="target/generated-sources/annotations/marker/marker.java" />
    <property name="source.change.detector.class.path" value="target/generated-sources/annotations/marker/SourceChangeDetector.java" />
		
    <property name="maven.dir" location="./.maven" />
	<property name="maven.url" value="https://github.com/autonomx/mavenRunner/releases/latest/download/maven.jar" />
	
	
	
    <!-- Ant file will download maven to ./.maven directory 
		and run  generate-sources or clean commands
	 -->
    <!--  set to run this at most once every 5 seconds. to avoid multiple consecutive calls-->
    <target name="check-maven-already-call">
        <delete file="${property.file.updated.path}" />
        <tstamp>
            <format property="few.seconds.ago" offset="-0" unit="second" pattern="MMddyyyyHHmmssz" />
        </tstamp>
    	
    	<echo>time: ${few.seconds.ago}</echo>

        <touch file="${property.file.marker.path}" datetime="${few.seconds.ago}"  pattern="MMddyyyyHHmmssz" mkdirs="true" />
        <uptodate property="target-file-modified-in-few-seconds" targetfile="target/generated-sources/target-file.txt">
            <srcfiles file="${property.file.marker.path}"/>
        </uptodate>
        <echo>is-target-file-modified-last-few-seconds: ${target-file-modified-in-few-seconds}</echo>
    </target>
	
	 <target name="enable-console-log">
	 	<copy file=".externalToolBuilders/annotation_generator_enableLog.launch" tofile=".externalToolBuilders/annotation_generator.launch" overwrite="true" />
	 </target>
	
	<target name="check-class-source-change">
	   <condition property="source.class.present">
	         	 <available file="${source.change.detector.class.path}"/>
	   </condition>
       <echo message="is source class present: ${source.class.present}" />
	</target>
	
	
	<!--  if source (src/main) dir changes, delete annotations/maker/marker.java file to indicated the need for code generation -->
    <target name="detect-source-changes" depends="check-class-source-change" if="source.class.present">
    	
    	<java classname="marker.SourceChangeDetector"
    	     classpath="target/classes/">          
    	 </java>
    </target>

	<target name="check-source-marker" depends="check-maven-already-call,detect-source-changes" unless="target-file-modified-in-few-seconds">
	   <condition property="source.marker.present">
	         <not>
	         	 <available file="${source.change.detector.marker.path}"/>
       		 </not>
	   </condition>
       <echo message="is source marker present: ${source.marker.present}" />
	</target>

	
    <!-- set proxy  -->
    <target name="probe-proxy">
        <!--  remove the quotes from the url string -->
        <antcall target="normalize-property">
            <param name="property.name" value="proxy.enabled.updated" />
            <param name="property.value" value="${proxy.enabled}" />
        </antcall>
        <antcall target="normalize-property">
            <param name="property.name" value="proxy.host.updated" />
            <param name="property.value" value="${proxy.host}" />
        </antcall>
        <antcall target="normalize-property">
            <param name="property.name" value="proxy.port.updated" />
            <param name="property.value" value="${proxy.port}" />
        </antcall>
        <antcall target="normalize-property">
            <param name="property.name" value="proxy.username.updated" />
            <param name="property.value" value="${proxy.username}" />
        </antcall>
        <antcall target="normalize-property">
            <param name="property.name" value="proxy.password.updated" />
            <param name="property.value" value="${proxy.password}" />
        </antcall>
        <property file="${property.file.updated.path}" />
        <echo message="is proxy enabled: ${proxy.enabled.updated} " />
        <condition property="is.proxy.enabled">
            <equals arg1="${proxy.enabled.updated}" arg2="true" />
        </condition>
        <condition property="proxy.evaluated">
            <and>
                <isset property="is.proxy.enabled" />
                <isset property="proxy.host.updated" />
                <isreachable host="${proxy.host.updated}" />
            </and>
        </condition>
    </target>
	
    <!--  set proxy value. checks if proxy is reachable -->
    <target name="set-proxy" depends="probe-proxy" if="proxy.evaluated">
        <echo message="proxy is enabled and reachable" />
        <property file="${property.file.updated.path}" />
        <condition property="proxy.host.updated" value="${proxy.host.updated}" else="">
            <isset property="proxy.host.updated" />
        </condition>
        <condition property="proxy.port.updated" value="${proxy.port.updated}" else="">
            <isset property="proxy.port.updated" />
        </condition>
        <condition property="proxy.username.updated" value="${proxy.username.updated}" else="">
            <isset property="proxy.username.updated" />
        </condition>
        <condition property="proxy.password.updated" value="${proxy.password.updated}" else="">
            <isset property="proxy.password.updated" />
        </condition>
        <echo message="proxy set: proxy.host: ${proxy.host.updated}; proxy.port: ${proxy.port.updated};        proxy.user: ${proxy.username.updated}; proxy.pass: ${proxy.password.updated}" />
        <setproxy proxyhost="${proxy.host.updated}" proxyport="${proxy.port.updated}" proxyuser="${proxy.username.updated}" proxypassword="${proxy.password.updated}" />
    </target>
	
    <!-- get maven url section is complete -->
    <!-- download maven if not exist at path ../runner/utils/maven/	
 				
 	-->
    <target name="check-maven">
        <available file="${maven.dir}/maven.jar" property="maven.present" />
        <echo message="is maven jar already exist: ${maven.present}" />
    </target>
	
    <!--  download maven and place in ./.mvn/ directory -->
    <target name="download-maven" depends="check-maven,set-proxy" unless="maven.present">
        <echo message="maven.url: ${maven.url}" />

        
    	<mkdir dir="${maven.dir}" />
        <get src="${maven.url}" dest="${maven.dir}" />
    </target>
    <!-- run maven commands: generate-sources and clean
 		
 	 -->

    <target name="mvn-clean" depends="download-maven" unless="target-file-modified-in-few-seconds">
    	<echo message="calling: maven clean" />
    	<antcall target="enable-console-log"></antcall>
    	
    	<java jar="./maven/maven.jar" fork="true" failonerror="true">
    		 	<arg value="clean generate-sources"/>
    	</java>
    	<echo>if your seeing this, compilation has potentially failed. Please see errors</echo>   	
    </target>
	
    <target name="mvn-clean-generate" depends="check-source-marker,download-maven">    	
    	<echo message="calling: maven generate sources" />
    	<antcall target="enable-console-log"></antcall>
    	<touch file="target/generated-sources/target-file.txt" datetime="now" />
       
    	<java jar="./.maven/maven.jar" fork="true" failonerror="true">
        		<arg value="generate-sources"/>
        </java>
    	<echo>if your seeing this, compilation has potentially failed. Please see errors</echo>   	
    </target>
	
    <!-- remove quotes, trim and write to proeprty file updated-properties.properties -->
    <target name="normalize-property" if="property.name">
        <property name="propB_" value="${property.value}" />
        <loadresource property="prop.nomarlized">
            <propertyresource name="propB_" />
            <filterchain>
                <tokenfilter>
                    <trim />
                    <filetokenizer />
                    <replacestring from="&quot;" to="" />
                </tokenfilter>
            </filterchain>
        </loadresource>
        <antcall target="write-property-file">
            <param name="property.name" value="${property.name}" />
            <param name="property.value" value="${prop.nomarlized}" />
        </antcall>
    </target>
	
    <!-- write to property file target/generated-sources/updated-properties.properties -->
    <target name="write-property-file" if="prop.nomarlized">
        <echo message="normalize property -&gt; ${property.name}: ${property.value}" />
    	<touch file="${property.file.updated.path}" mkdirs="true" />
        <propertyfile file="${property.file.updated.path}">
            <entry key="${property.name}" value="${property.value}" />
        </propertyfile>
    </target>
</project>
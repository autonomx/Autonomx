# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:

- bash: 'ls'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'run tests'

- bash: 'mvn clean compile test -DsuiteXmlFile=suites/frameworkFunctionalTests.xml -Dglobal.parallelTestCount=1 -Dweb.browserType=CHROME -Dweb.maximizeBrowser=true -Drecorder.enableRecording=true -Dslack.enableSlackNotification=true -Dslack.notifyOnFailureOnly=true -Dslack.slackToken=xoxp-519840094613-519840094869-709732782135-414eb4c2a98a46f61c48a55920099f79 -Dslack.channelId=CF913Q9A5'
  workingDirectory: '$(System.DefaultWorkingDirectory)/automation'
  displayName: 'run tests'
  
- task: PublishTestResults@2
  displayName: 'Publish Test Results **/junitreports/TEST-*.xml'
  inputs:
    testResultsFiles: '**/junitreports/TEST-*.xml'
    failTaskOnFailedTests: true
  continueOnError: true
  condition: succeededOrFailed()

- task: ArchiveFiles@2
  displayName: 'archive reports'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/_Autonomx/automation/test-output/testReports'
    archiveFile: '$(System.DefaultWorkingDirectory)/_Autonomx/report.zip'
  continueOnError: true
  condition: failed()

- powershell: |
   # Write your PowerShell commands here.
   
   Write-host "##vso[task.uploadfile]$(System.DefaultWorkingDirectory)/_Autonomx/report.zip"
   
  displayName: 'upload reports'
  condition: failed()